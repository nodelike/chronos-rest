generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  email                   String        @unique
  username                String?
  password                String
  isVerified              Boolean       @default(false)
  verificationCode        String?
  verificationCodeExpires DateTime?     @db.Timestamptz(6)
  token                   String?       @unique
  tokenExpiry             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  deletedAt               DateTime?
  chronicles              Chronicle[]
  storageItems            StorageItem[]

  @@map("users")
}

model Utils {
  id        String   @id @default(uuid())
  name      String   @unique
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("utils")
}

model StorageItem {
  id            String             @id @default(uuid())
  uri           String
  fileName      String
  fileSize      BigInt
  mimeType      String
  type          ChronicleItemType
  source        ContentSource
  collectorType CollectorType?
  userId        String
  createdAt     DateTime           @default(now())
  processedAt   DateTime?
  deletedAt     DateTime?
  rawMeta       Json?
  chronicleRefs ChronicleStorage[]
  face          Face[]
  mediaMeta     MediaMeta[]
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialMetas   SocialMeta[]       @relation("SocialMetaToStorageItem")

  @@index([userId, createdAt])
  @@index([type])
  @@index([processedAt])
  @@map("storage_items")
}

model MediaMeta {
  id      String      @id @default(uuid())
  type    MetaType
  payload Json
  itemId  String
  item    StorageItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([type])
  @@map("media_meta")
}

model Face {
  id            String      @id @default(uuid())
  boundingBox   Json
  emotions      String[]
  age           Int?
  gender        Gender?
  storageItem   StorageItem @relation(fields: [storageItemId], references: [id], onDelete: Cascade)
  storageItemId String
  person        Person      @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String
  createdAt     DateTime    @default(now())

  @@map("face_detections")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Person {
  id               String           @id @default(uuid())
  name             String?
  type             PersonType       @default(PERSON)
  gender           Gender?
  age              Int?
  storageItemId    String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  face             Face[]
  profilePicture   ProfilePicture?
  relationsFrom    PersonRelation[] @relation("RelationFrom") 
  relationsTo      PersonRelation[] @relation("RelationTo")
  socialProfiles   SocialProfile[]

  @@map("people")
}

model ProfilePicture {
  id String @id @default(uuid())
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId String @unique
  s3Key    String
  s3Url    String

  @@map("profile_pictures")
}

model PersonRelation {
  id         String             @id @default(uuid())
  fromId     String
  toId       String
  type       PersonRelationType
  createdAt  DateTime           @default(now())
  fromPerson Person             @relation("RelationFrom", fields: [fromId], references: [id], onDelete: Cascade)
  toPerson   Person             @relation("RelationTo", fields: [toId], references: [id], onDelete: Cascade)

  @@map("person_relations")
}

model SocialProfile {
  id         String         @id @default(uuid())
  platform   SocialPlatform
  handle     String
  profileUrl String
  bio        String?
  personId   String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  posts      SocialMeta[]
  person     Person         @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("social_profiles")
}

model SocialMeta {
  id              String         @id @default(uuid())
  platform        SocialPlatform
  postUrl         String
  content         String
  postedAt        DateTime       @default(now())
  authorProfileId String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  authorProfile   SocialProfile? @relation(fields: [authorProfileId], references: [id])
  hashtags        Hashtag[]      @relation("HashtagToSocialMeta")
  attachments     StorageItem[]  @relation("SocialMetaToStorageItem")

  @@map("social_meta")
}

model Hashtag {
  id          String       @id @default(uuid())
  tag         String       @unique
  socialMetas SocialMeta[] @relation("HashtagToSocialMeta")

  @@map("hashtags")
}

model ChronicleStorage {
  chronicleId String
  storageId   String
  order       Int?
  notes       String?
  chronicle   Chronicle   @relation(fields: [chronicleId], references: [id], onDelete: Cascade)
  storage     StorageItem @relation(fields: [storageId], references: [id], onDelete: Cascade)

  @@id([chronicleId, storageId])
  @@map("chronicle_storage")
}

model Chronicle {
  id          String             @id @default(uuid())
  title       String
  description String?
  tags        String[]
  startDate   DateTime?
  endDate     DateTime?
  userId      String
  body        Json
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  storageRefs ChronicleStorage[]
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([title])
  @@index([tags])
  @@index([startDate, endDate])
  @@map("chronicles")
}

enum ChronicleItemType {
  PHOTO
  VIDEO
  DOCUMENT
  AUDIO
  EVENT
  NOTE
  LOCATION
  LINK
  SOCIAL_MEDIA
  OTHER
}

enum CollectorType {
  EVENT_BASED
  PERIODIC
  MANUAL
}

enum ContentSource {
  CAMERA
  TWITTER
  INSTAGRAM
  LINKEDIN
  CALENDAR
  EMAIL
  SMS
  WHATSAPP
  MANUAL
  OTHER
}

enum SocialPlatform {
  TWITTER
  INSTAGRAM
  LINKEDIN
  OTHER
}

enum PersonRelationType {
  FRIEND
  COLLEAGUE
  FAMILY
  FOLLOWER
  OTHER
}

enum PersonType {
  PERSON
  CELEBRITY
  OTHER
}

enum MetaType {
  GEO
  OCR
  TRANSCRIPT
  KEYWORD
  LABEL
  CUSTOM_LABEL
  CONTENT_MODERATION
  OTHER
}
